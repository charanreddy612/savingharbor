---
import Base from "../../layouts/Base.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import { api } from "../../lib/api";
import DOMPurify from "isomorphic-dompurify";

type BlogDetail = {
  id: string | number;
  slug: string;
  title: string;
  hero_image_url?: string | null;
  category?: string | null;
  created_at?: string | null;
  updated_at?: string | null;
  author?: {
    name?: string | null;
    role?: string | null;
    avatar_url?: string | null;
    bio?: string | null;
    sameAs?: string[];
  } | null;
  breadcrumbs?: { name: string; url: string }[];
  content_html?: string | null;
};

type BlogDetailResponse = {
  data: BlogDetail | null;
  meta?: {
    canonical?: string;
    jsonld?: any;
    title?: string;
    description?: string;
  };
  related?: BlogDetail[];
};

const { slug } = Astro.params as { slug: string };

let resp: BlogDetailResponse | null = null;
try {
  resp = await api.get<BlogDetailResponse>(
    `/blogs/${slug}`,
    {},
    { retries: 2, timeout: 8000 }
  );
} catch (e) {
  console.error("Error fetching blog detail:", e);
  resp = {
    data: null,
    meta: {
      title: "Blog - Saving Harbor",
      description: "Blog temporarily unavailable.",
      canonical: undefined,
      jsonld: undefined,
    },
    related: [],
  };
}

const post = resp?.data || null;
const meta = resp?.meta || {};
const related = resp?.related || [];
const pageTitle =
  meta.title ||
  (post?.title ? `${post.title} - Saving Harbor` : "Blog - Saving Harbor");
const pageDesc = meta.description || "Saving Harbor editorial.";
const canonical = meta.canonical;
const jsonld = meta.jsonld;

const _ALLOWED_TAGS = [
  "h1","h2","h3","h4","p","br",
  "strong","b","em","i","u","s",
  "ul","ol","li",
  "a","img","blockquote"
];

const _ALLOWED_ATTR = [
  "href","title","rel","target",
  "src","alt","width","height",
  "id", "class", "loading" // add any small attrs you need
];

const safeBodyHtml = post?.content_html
  ? DOMPurify.sanitize(post.content_html, { ALLOWED_TAGS: _ALLOWED_TAGS, ALLOWED_ATTR: _ALLOWED_ATTR })
  : null;

// Generate TOC (server-safe — no DOMParser)
let toc: { id: string; text: string }[] = [];
let safeBodyHtmlWithIds = safeBodyHtml || "";

if (safeBodyHtml) {
  // Regex to match opening h2/h3 tags and capture optional id + inner text (non-greedy)
  // This will find <h2 ...>...<\/h2> and <h3 ...>...<\/h3>
  const headingRegex = /<(h[23])([^>]*)>([\s\S]*?)<\/\1>/gi;

  const idsSeen = new Set<string>();
  const slugify = (s: string) =>
    String(s || "")
      .trim()
      .toLowerCase()
      .replace(/<[^>]+>/g, "") // strip HTML inside heading
      .replace(/[^\w\s-]/g, "") // remove punctuation
      .replace(/\s+/g, "-");

  // Build TOC and ensure headings in HTML have ids (inject if missing)
  safeBodyHtmlWithIds = safeBodyHtmlWithIds.replace(
    headingRegex,
    (match, tag, attrs = "", inner) => {
      // Try to extract an existing id attr
      const idMatch = /id\s*=\s*["']([^"']+)["']/i.exec(attrs);
      let id = idMatch ? idMatch[1] : slugify(inner);

      // Avoid duplicate ids — append counter if necessary
      let base = id;
      let n = 1;
      while (idsSeen.has(id)) {
        id = `${base}-${n++}`;
      }
      idsSeen.add(id);

      // record TOC entry (use inner text without tags)
      const plainText = inner.replace(/<[^>]+>/g, "").trim();
      toc.push({ id, text: plainText });

      // If id existed, keep attrs; otherwise inject id into attrs
      if (idMatch) {
        return `<${tag}${attrs}>${inner}</${tag}>`;
      } else {
        // inject id attribute (preserve other attrs spacing)
        const attrsNormalized = attrs && attrs.trim() ? " " + attrs.trim() : "";
        return `<${tag} id="${id}"${attrsNormalized}>${inner}</${tag}>`;
      }
    }
  );
}
---

<Base meta={{ title: pageTitle, description: pageDesc, canonical, jsonld }}>
  <Header />
  <main class="container mx-auto px-4 py-10">
    {post ? (
      <>
        <Breadcrumbs breadcrumbs={post.breadcrumbs} />

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-10 mt-4">
          <!-- Main article -->
          <article class="lg:col-span-2 card-base p-6">
            <header class="mb-6">
              <h1 class="text-3xl md:text-4xl font-bold leading-tight text-brand-primary">
                {post.title}
              </h1>

              <div class="mt-3 flex flex-wrap items-center gap-3 text-sm text-gray-500">
                {post.category && <span class="px-2 py-0.5 rounded bg-brand-primary/10 text-brand-primary text-xs">{post.category}</span>}
                {post.created_at && <span>{new Date(post.created_at).toLocaleDateString()}</span>}
                {post.updated_at && <span>· Updated {new Date(post.updated_at).toLocaleDateString()}</span>}
              </div>

              {post.author && (
                <div class="mt-4 flex items-center gap-3">
                  <div class="w-12 h-12 rounded-full overflow-hidden bg-gray-100 flex-shrink-0">
                    {post.author.avatar_url ? (
                      <img src={post.author.avatar_url} alt={post.author.name || "Author"} class="w-full h-full object-cover" loading="lazy" />
                    ) : (
                      <div class="w-full h-full flex items-center justify-center text-xs text-gray-400">Author</div>
                    )}
                  </div>
                  <div>
                    <div class="font-medium text-gray-900">{post.author.name || "Editorial Team"}</div>
                    {post.author.role && <div class="text-sm text-gray-500">{post.author.role}</div>}
                  </div>
                </div>
              )}
            </header>

            {post.hero_image_url && (
              <figure class="mb-6">
                <img src={post.hero_image_url} alt={post.title} class="w-full rounded-lg border border-gray-200 shadow-sm" loading="lazy" />
              </figure>
            )}

            {safeBodyHtml ? (
              <div class="prose max-w-none ql-editor merchant-description">
                <div set:html={safeBodyHtmlWithIds} />
              </div>
            ) : (
              <p class="text-gray-600">This article has no content.</p>
            )}

            <!-- Share -->
            <div class="mt-8 flex items-center justify-between gap-4">
              <div class="flex items-center gap-2">
                <span class="text-sm text-gray-600">Share:</span>
                <div class="flex items-center gap-2">
                  <a class="p-2 rounded hover:bg-brand-primary/10 text-brand-primary transition"
                    href={`https://twitter.com/intent/tweet?url=${encodeURIComponent(canonical || Astro.url.href)}&text=${encodeURIComponent(post.title)}`}
                    target="_blank" rel="noopener">Twitter</a>
                  <a class="p-2 rounded hover:bg-brand-primary/10 text-brand-primary transition"
                    href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(canonical || Astro.url.href)}`}
                    target="_blank" rel="noopener">LinkedIn</a>
                </div>
              </div>
              <div>
                <a href="/blogs" class="btn btn-outline text-sm">Back to Blogs</a>
              </div>
            </div>

            <!-- Related posts -->
            {related.length > 0 && (
              <section class="mt-12 card-base p-6">
                <h3 class="text-xl font-semibold text-brand-primary mb-4">Related posts</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {related.map((r) => (
                    <a href={`/blogs/${r.slug}`} class="block p-4 border rounded hover:shadow-sm">
                      <div class="font-medium">{r.title}</div>
                      {r.created_at && (
                        <div class="text-xs text-gray-500 mt-1">
                          {new Date(r.created_at).toLocaleDateString()}
                        </div>
                      )}
                    </a>
                  ))}
                </div>
              </section>
            )}
          </article>

          <!-- Sidebar (store-style sticky) -->
          <aside class="lg:col-span-1 lg:sticky lg:top-4 lg:self-start">
            <div class="space-y-6">
              <div class="card-base p-4">
                <h4 class="font-semibold text-sm text-brand-primary mb-2">Get updates</h4>
                <p class="text-sm text-gray-600 mb-3">Subscribe for the latest articles and deals.</p>
                <form class="flex gap-2">
                  <input type="email" placeholder="you@domain.com" class="flex-1 px-3 py-2 border rounded text-sm" />
                  <button class="btn btn-primary text-sm">Subscribe</button>
                </form>
              </div>

              {toc.length > 0 && (
                <div>
                  <div class="card-base p-4">
                    <h4 class="font-semibold text-sm text-brand-secondary mb-2">On this page</h4>
                    <nav class="text-sm text-gray-600 space-y-2">
                      {toc.map((h) => (
                        <a href={`#${h.id}`} class="block hover:text-brand-primary">{h.text}</a>
                      ))}
                    </nav>
                  </div>
                </div>
              )}

              {post.author && (
                <div class="card-base p-4">
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 rounded-full overflow-hidden bg-gray-100">
                      {post.author.avatar_url ? (
                        <img src={post.author.avatar_url} alt={post.author.name || "Author"} class="w-full h-full object-cover" loading="lazy" />
                      ) : (
                        <div class="w-full h-full flex items-center justify-center text-xs text-gray-400">A</div>
                      )}
                    </div>
                    <div>
                      <div class="font-medium text-gray-900">{post.author.name || "Editorial Team"}</div>
                      {post.author.role && <div class="text-xs text-gray-500">{post.author.role}</div>}
                    </div>
                  </div>
                  {post.author.bio && (
                    <div class="mt-3 text-sm text-gray-600" set:html={DOMPurify.sanitize(post.author.bio)}></div>)}
                  {post.author.sameAs && post.author.sameAs.length > 0 && (
                    <div class="mt-2 flex gap-2">
                      {post.author.sameAs.map((link) => (
                        <a href={link} target="_blank" rel="noopener" class="text-xs text-brand-primary hover:underline">{link.replace(/^https?:\/\//, "")}</a>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </div>
          </aside>
        </div>
      </>
    ) : (
      <section class="py-20 text-center">
        <h1 class="text-2xl font-bold text-brand-primary">Post not found</h1>
        <p class="text-gray-600 mt-2">Please check the URL or browse all posts.</p>
        <div class="mt-4">
          <a href="/blogs" class="btn btn-outline">Back to Blogs</a>
        </div>
      </section>
    )}
  </main>
  <Footer />
</Base>
